import pandas as pd
import streamlit as st
import numpy as np
from io import BytesIO

# ================== C·∫•u h√¨nh & Danh m·ª•c CT ==================
PROGRAMS = {
    "NMCD": "N∆∞·ªõc m·∫Øm cao ƒë·∫°m",
    "DHLM": "D·∫ßu h√†o, N∆∞·ªõc t∆∞∆°ng",
    "KOS&XX": "C√° KOS & X√∫c x√≠ch",
    "GVIG": "Gia v·ªã g√≥i",
    "LTLKC": "L·∫©u Th√°i & L·∫©u Kim chi",
}

st.set_page_config(page_title="X·ª≠ l√Ω d·ªØ li·ªáu tr∆∞ng b√†y", layout="wide")
# ===== UI THEME / HEADER =====
APP_VERSION = "v0.3"
APP_AUTHOR  = "¬© Nguyen Anh Tai"
PRIMARY_EMOJI = "üìà"

st.markdown("""
<style>
/* TƒÉng chi·ªÅu r·ªông, font, m√†u */
[data-testid="stAppViewContainer"] {padding-top: 0rem;}
:root { --brand: #2f6fed; --text: #1b1f23; --muted: #6b7280; }
h1.app-title {
  font-weight: 800; font-size: 44px; line-height: 1.1;
  margin: 0.15rem 0 0.4rem 0; letter-spacing: -0.02em;
  background: linear-gradient(90deg,#111827, #334155 60%, #6366f1);
  -webkit-background-clip: text; -webkit-text-fill-color: transparent;
}
p.app-sub {
  color: var(--muted); margin: 0.2rem 0 1.1rem 0; font-size: 16px;
}
.badge {
  display:inline-block; padding: 4px 10px; border-radius: 999px;
  background:#eef2ff; color:#4338ca; font-weight:600; font-size:12px; margin-left:.5rem;
  border:1px solid #c7d2fe;
}
footer.app-footer {
  position: fixed; bottom: 12px; right: 18px;
  background: rgba(255,255,255,.75); backdrop-filter: blur(6px);
  border: 1px solid #e5e7eb; padding: 6px 10px; border-radius: 10px; font-size: 12px; color:#374151;
  box-shadow: 0 6px 24px rgba(0,0,0,.05);
}
.stDownloadButton, .stButton>button {
  border-radius: 10px !important; font-weight: 600 !important;
}
div[role="tablist"] button[role="tab"] { font-weight: 600; }
.st-emotion-cache-13k62yr { border-radius: 14px; } /* expander bo tr√≤n */
thead tr th { position: sticky; top: 0; background: #fff; z-index: 1; }
</style>
""", unsafe_allow_html=True)

st.markdown(
    f"""
    <h1 class="app-title">{PRIMARY_EMOJI} X·ª≠ l√Ω d·ªØ li·ªáu Tr∆∞ng b√†y &amp; Doanh s·ªë
      <span class="badge">{APP_VERSION}</span>
      <span class="badge">{APP_AUTHOR}</span>
    </h1>
    <p class="app-sub">Tr∆∞ng b√†y + Doanh s·ªë + Tr·∫°ng th√°i ¬∑ B·ªô l·ªçc n√¢ng cao ¬∑ Xu·∫•t Excel chu·∫©n</p>
    """,
    unsafe_allow_html=True,
)
# Footer b·∫£n quy·ªÅn (nh·∫π nh√†ng, c·ªë ƒë·ªãnh g√≥c ph·∫£i d∆∞·ªõi)
st.markdown(f'<footer class="app-footer">{APP_AUTHOR}</footer>', unsafe_allow_html=True)

# Th√™m About v√†o sidebar
with st.sidebar:
    st.markdown("### ‚ÑπÔ∏è About")
    st.markdown(
        f"- T√°c gi·∫£: **Nguyen Anh Tai**  \n"
        f"- Phi√™n b·∫£n: **{APP_VERSION}**  \n"
        "- T√≠nh nƒÉng: Tr∆∞ng b√†y ¬∑ Doanh s·ªë ¬∑ Tr·∫°ng th√°i ¬∑ L·ªçc ¬∑ Xu·∫•t Excel"
    )

# Chu·∫©n ho√° t√™n sheet trong file Doanh s·ªë (tr√°nh l·ªách nh∆∞ GVG, KOSXX)
SHEET_NAME_ALIASES = {
    "NMCD": "NMCD",
    "DHLM": "DHLM",
    "GVG": "GVIG",     # l∆∞u GVG -> m√¨nh hi·ªÉu l√† GVIG
    "GVIG": "GVIG",
    "LTLKC": "LTLKC",
    "KOSXX": "KOS&XX", # l∆∞u KOSXX -> m√¨nh hi·ªÉu l√† KOS&XX
    "KOS&XX": "KOS&XX",
}
# M·ª©c t·ªëi thi·ªÉu / 1 su·∫•t theo CT (b·∫°n ƒë·ªïi s·ªë ·ªü ƒë√¢y n·∫øu ch√≠nh s√°ch thay ƒë·ªïi)
PER_SLOT_MIN = {
    "NMCD": 150_000,  # N∆∞·ªõc m·∫Øm cao ƒë·∫°m
    "DHLM": 100_000,  # D·∫ßu h√†o, N∆∞·ªõc t∆∞∆°ng
    "KOS&XX": 200_000,  # C√° KOS & X√∫c x√≠ch
    "GVIG": 300_000,  # Gia v·ªã g√≥i (Mi·ªÅn Trung/B·∫Øc)
    "LTLKC": 80_000,   # L·∫©u Th√°i & L·∫©u Kim chi
}
def _resolve_sheet_name(xls: pd.ExcelFile, program_code: str) -> str:
    """
    Tr·∫£ v·ªÅ t√™n sheet th·ª±c t·∫ø trong file doanh s·ªë t∆∞∆°ng ·ª©ng v·ªõi program_code.
    - Ch·∫•p nh·∫≠n c√°c alias: GVG~GVIG, KOSXX~KOS&XX
    - Kh√¥ng ph√¢n bi·ªát hoa/th∆∞·ªùng, b·ªè kho·∫£ng tr·∫Øng d∆∞.
    """
    # chu·∫©n ho√° code ƒë∆∞·ª£c ch·ªçn
    want = SHEET_NAME_ALIASES.get(program_code.strip().upper(), program_code.strip().upper())

    # map sheet trong file -> d·∫°ng chu·∫©n ƒë·ªÉ so
    norm2real = {}
    for s in xls.sheet_names:
        norm = s.strip().upper()
        norm = SHEET_NAME_ALIASES.get(norm, norm)  # ƒë·ªïi alias v·ªÅ t√™n chu·∫©n
        norm2real[norm] = s  # l∆∞u l·∫°i t√™n th·∫≠t trong file

    if want in norm2real:
        return norm2real[want]

    # fallback: th·ª≠ so kh·ªõp g·∫ßn ƒë√∫ng
    for norm, real in norm2real.items():
        if want in norm or norm in want:
            return real

    raise ValueError(
        f"Kh√¥ng t√¨m th·∫•y sheet cho ch∆∞∆°ng tr√¨nh '{program_code}'. "
        f"Sheets c√≥ trong file: {', '.join(xls.sheet_names)}"
    )

# ================== Helpers ==================
BASE_COLS = ["M√£ CTTB","M√£ NPP","T√™n NPP","M√£ kh√°ch h√†ng","T√™n kh√°ch h√†ng"]

def read_display_excel(file) -> pd.DataFrame:
    """ƒê·ªçc file tr∆∞ng b√†y t·ª´ h√†ng 3 (skiprows=2), gi·ªØ B,F,G,H,K,L,T (H=Giai ƒëo·∫°n)."""
    df = pd.read_excel(file, usecols="B,F,G,H,K,L,T", skiprows=2, engine="openpyxl")
    df.columns = [
        "M√£ CTTB","M√£ NPP","T√™n NPP","Giai ƒëo·∫°n",
        "M√£ kh√°ch h√†ng","T√™n kh√°ch h√†ng","S·ªë su·∫•t ƒëƒÉng k√Ω"
    ]
    for c in ["M√£ CTTB","M√£ NPP","T√™n NPP","M√£ kh√°ch h√†ng","T√™n kh√°ch h√†ng","Giai ƒëo·∫°n"]:
        df[c] = df[c].astype(str).str.strip()
    df = df[(df["M√£ CTTB"]!="") & (df["M√£ kh√°ch h√†ng"]!="") & (df["Giai ƒëo·∫°n"]!="")].copy()
    df["S·ªë su·∫•t ƒëƒÉng k√Ω"] = pd.to_numeric(df["S·ªë su·∫•t ƒëƒÉng k√Ω"], errors="coerce").fillna(0).astype(int)
    return df[["Giai ƒëo·∫°n"] + BASE_COLS + ["S·ªë su·∫•t ƒëƒÉng k√Ω"]]

def extract_month_label(df: pd.DataFrame) -> str:
    """L·∫•y nh√£n th√°ng t·ª´ c·ªôt 'Giai ƒëo·∫°n' (gi√° tr·ªã ph·ªï bi·∫øn nh·∫•t)."""
    vals = df["Giai ƒëo·∫°n"].dropna().astype(str).str.strip()
    if vals.empty:
        return "Th√°ng ?"
    try:
        return vals.mode().iloc[0]
    except Exception:
        return vals.iloc[0]

def combine_two_months(d1: pd.DataFrame, d2: pd.DataFrame):
    """G·ªôp 2 th√°ng theo key BASE_COLS. Tr·∫£ v·ªÅ (out, m1, m2)."""
    m1 = extract_month_label(d1)
    m2 = extract_month_label(d2)

    d1_slots = (d1.groupby(BASE_COLS, as_index=False)["S·ªë su·∫•t ƒëƒÉng k√Ω"]
                  .sum().rename(columns={"S·ªë su·∫•t ƒëƒÉng k√Ω": f"Giai ƒëo·∫°n - {m1}"}))
    d2_slots = (d2.groupby(BASE_COLS, as_index=False)["S·ªë su·∫•t ƒëƒÉng k√Ω"]
                  .sum().rename(columns={"S·ªë su·∫•t ƒëƒÉng k√Ω": f"Giai ƒëo·∫°n - {m2}"}))

    out = d1_slots.merge(d2_slots, on=BASE_COLS, how="outer").fillna(0)
    out[f"Giai ƒëo·∫°n - {m1}"] = out[f"Giai ƒëo·∫°n - {m1}"].astype(int)
    out[f"Giai ƒëo·∫°n - {m2}"] = out[f"Giai ƒëo·∫°n - {m2}"].astype(int)

    out[f"Doanh s·ªë - {m1}"] = 0
    out[f"Doanh s·ªë - {m2}"] = 0
    out["TR·∫†NG TH√ÅI"] = ""

    cols = BASE_COLS + [f"Giai ƒëo·∫°n - {m1}", f"Giai ƒëo·∫°n - {m2}",
                        f"Doanh s·ªë - {m1}", f"Doanh s·ªë - {m2}", "TR·∫†NG TH√ÅI"]
    out = out[cols].sort_values(["M√£ NPP","T√™n NPP","T√™n kh√°ch h√†ng"]).reset_index(drop=True)
    return out, m1, m2

def read_sales_excel(file, program_sheet_name: str) -> pd.DataFrame:
    """
    ƒê·ªçc file doanh s·ªë: ch·ªâ sheet tr√πng t√™n ch∆∞∆°ng tr√¨nh (v√≠ d·ª• 'NMCD').
    T·ª± chu·∫©n ho√° alias sheet: GVG->GVIG, KOSXX->KOS&XX, ...
    Tr·∫£ v·ªÅ: ['M√£ kh√°ch h√†ng', 'T·ªïng Doanh s·ªë'] ƒë√£ c·ªông g·ªôp theo KH.
    """
    xls = pd.ExcelFile(file, engine="openpyxl")
    # t√¨m ƒë√∫ng sheet th·ª±c t·∫ø trong file theo program_sheet_name
    sheet = _resolve_sheet_name(xls, program_sheet_name)
    df = pd.read_excel(xls, sheet_name=sheet)

    # ƒëo√°n c·ªôt m√£ KH
    id_candidates = [c for c in df.columns if str(c).strip().lower() in
        ["m√£ kh√°ch h√†ng","ma khach hang","m√£ kh","ma kh","customerid","customer id","makh","ma_kh","m√£_kh"]]
    if not id_candidates:
        raise ValueError("Kh√¥ng t√¨m th·∫•y c·ªôt M√£ kh√°ch h√†ng trong file doanh s·ªë")
    col_id = id_candidates[0]

    # ƒëo√°n c·ªôt t·ªïng doanh s·ªë
    sales_candidates = [c for c in df.columns if str(c).strip().lower() in
        ["t·ªïng doanh s·ªë","tong doanh so","tongdoanhso","doanh so","doanh_s·ªë","sum sales","sales"]]
    if not sales_candidates:
        raise ValueError("Kh√¥ng t√¨m th·∫•y c·ªôt 'T·ªïng Doanh s·ªë' trong file doanh s·ªë")
    col_sales = sales_candidates[0]

    out = df[[col_id, col_sales]].copy()
    out.columns = ["M√£ kh√°ch h√†ng","T·ªïng Doanh s·ªë"]
    out["M√£ kh√°ch h√†ng"] = out["M√£ kh√°ch h√†ng"].astype(str).str.strip()
    out["T·ªïng Doanh s·ªë"] = pd.to_numeric(out["T·ªïng Doanh s·ªë"], errors="coerce").fillna(0)
    out = out.groupby("M√£ kh√°ch h√†ng", as_index=False)["T·ªïng Doanh s·ªë"].sum()
    return out

def apply_status_generic(df: pd.DataFrame, m1: str, m2: str, per_slot_min: int) -> pd.DataFrame:
    s1_col = f"Giai ƒëo·∫°n - {m1}"
    s2_col = f"Giai ƒëo·∫°n - {m2}"
    d1_col = f"Doanh s·ªë - {m1}"
    d2_col = f"Doanh s·ªë - {m2}"

    df2 = df.copy()
    for c in [s1_col, s2_col, d1_col, d2_col]:
        df2[c] = pd.to_numeric(df2[c], errors="coerce").fillna(0).astype(int)

    min1 = df2[s1_col] * int(per_slot_min)
    min2 = df2[s2_col] * int(per_slot_min)

    join1 = df2[s1_col] > 0
    join2 = df2[s2_col] > 0

    meet1 = (df2[d1_col] >= min1) & join1
    meet2 = (df2[d2_col] >= min2) & join2

    status = []
    for j1, j2, ok1, ok2 in zip(join1, join2, meet1, meet2):
        if not (j1 and j2):
            status.append("Kh√¥ng x√©t")
        elif (not ok1) and (not ok2):
            status.append("Kh√¥ng ƒê·∫°t")
        else:
            status.append("ƒê·∫°t")

    df2["TR·∫†NG TH√ÅI"] = status
    df2[f"T·ªëi thi·ªÉu - {m1}"] = min1
    df2[f"T·ªëi thi·ªÉu - {m2}"] = min2
    return df2


def apply_status_kosxx(df: pd.DataFrame, m1: str, m2: str,
                       min_mb: int = 200_000, min_other: int = 300_000) -> pd.DataFrame:
    """
    KOS&XX theo mi·ªÅn:
      - 'M√£ NPP' ch·ª©a 'MB'  -> 200k/slot
      - C√≤n l·∫°i             -> 300k/slot
    """
    s1_col = f"Giai ƒëo·∫°n - {m1}"
    s2_col = f"Giai ƒëo·∫°n - {m2}"
    d1_col = f"Doanh s·ªë - {m1}"
    d2_col = f"Doanh s·ªë - {m2}"

    out = df.copy()
    for c in [s1_col, s2_col, d1_col, d2_col]:
        out[c] = pd.to_numeric(out[c], errors="coerce").fillna(0).astype(int)

    npp = out["M√£ NPP"].astype(str).str.upper()
    per_slot = np.where(npp.str.contains("MB", na=False), min_mb, min_other)

    min1 = out[s1_col] * per_slot
    min2 = out[s2_col] * per_slot

    join1 = out[s1_col] > 0
    join2 = out[s2_col] > 0

    meet1 = (out[d1_col] >= min1) & join1
    meet2 = (out[d2_col] >= min2) & join2

    status = []
    for j1, j2, ok1, ok2 in zip(join1, join2, meet1, meet2):
        if not (j1 and j2):
            status.append("Kh√¥ng x√©t")
        elif (not ok1) and (not ok2):
            status.append("Kh√¥ng ƒê·∫°t")
        else:
            status.append("ƒê·∫°t")

    out["TR·∫†NG TH√ÅI"] = status
    out[f"T·ªëi thi·ªÉu - {m1}"] = min1
    out[f"T·ªëi thi·ªÉu - {m2}"] = min2
    return out

def export_excel_layout(df: pd.DataFrame, m1: str, m2: str, prog: str) -> bytes:
    """
    Xu·∫•t .xlsx:
    - Header g·ªôp 2 h√†ng (Giai ƒëo·∫°n m1/m2, Doanh s·ªë m1/m2).
    - KH√îNG c√≥ h√†ng ti√™u ƒë·ªÅ l·∫∑p ·ªü d√≤ng 3.
    - T√¥ m√†u TR·∫†NG TH√ÅI, ƒë·ªãnh d·∫°ng s·ªë & ƒë·ªô r·ªông c·ªôt.
    """
    from io import BytesIO
    import xlsxwriter

    cols = [
        "M√£ CTTB","M√£ NPP","T√™n NPP","M√£ kh√°ch h√†ng","T√™n kh√°ch h√†ng",
        f"Giai ƒëo·∫°n - {m1}", f"Giai ƒëo·∫°n - {m2}",
        f"Doanh s·ªë - {m1}", f"Doanh s·ªë - {m2}", "TR·∫†NG TH√ÅI"
    ]

    d = df.copy()
    for c in cols:
        if c not in d.columns:
            d[c] = ""
    d = d[cols].reset_index(drop=True)

    # Chu·∫©n ho√° ki·ªÉu s·ªë
    for c in [f"Giai ƒëo·∫°n - {m1}", f"Giai ƒëo·∫°n - {m2}"]:
        d[c] = pd.to_numeric(d[c], errors="coerce").fillna(0).astype(int)
    for c in [f"Doanh s·ªë - {m1}", f"Doanh s·ªë - {m2}"]:
        d[c] = pd.to_numeric(d[c], errors="coerce").fillna(0).astype(int)

    buf = BytesIO()
    with pd.ExcelWriter(buf, engine="xlsxwriter") as writer:
        wb = writer.book
        ws = wb.add_worksheet(f"{prog}")

        # ==== formats ====
        header = wb.add_format({"bold": True,"align":"center","valign":"vcenter",
                                "border":1,"bg_color":"#00B0F0","font_color":"#FFFFFF"})
        sub = wb.add_format({"bold": True,"align":"center","valign":"vcenter",
                             "border":1,"bg_color":"#D9EDF7"})
        cell = wb.add_format({"border":1})
        center = wb.add_format({"border":1,"align":"center"})
        intfmt = wb.add_format({"border":1,"num_format":"#,##0"})
        okfmt  = wb.add_format({"border":1,"align":"center","bg_color":"#C6EFCE"})
        badfmt = wb.add_format({"border":1,"align":"center","bg_color":"#FFC7CE"})
        neut   = wb.add_format({"border":1,"align":"center","bg_color":"#F2F2F2"})

        # ==== header g·ªôp (2 h√†ng) ====
        ws.merge_range(0,0,1,0,"M√£ CTTB", header)
        ws.merge_range(0,1,1,1,"M√£ NPP", header)
        ws.merge_range(0,2,1,2,"T√™n NPP", header)
        ws.merge_range(0,3,1,3,"M√£ kh√°ch h√†ng", header)
        ws.merge_range(0,4,1,4,"T√™n kh√°ch h√†ng", header)
        ws.merge_range(0,5,0,6,"Giai ƒëo·∫°n", header)
        ws.merge_range(0,7,0,8,"Doanh s·ªë", header)
        ws.merge_range(0,9,1,9,"TR·∫†NG TH√ÅI", header)

        # H√†ng 2 (subheader) ch·ªâ ghi ti√™u ƒë·ªÅ con cho 4 c·ªôt nh√≥m
        ws.write(1,5, m1, sub)
        ws.write(1,6, m2, sub)
        ws.write(1,7, m1, sub)
        ws.write(1,8, m2, sub)

        # ==== data (b·∫Øt ƒë·∫ßu t·ª´ h√†ng 3 - index 2) ====
        start_row = 2
        n = len(d)
        for i in range(n):
            r = start_row + i
            ws.write(r,0, d.iloc[i,0], cell)           # M√£ CTTB
            ws.write(r,1, d.iloc[i,1], cell)           # M√£ NPP
            ws.write(r,2, d.iloc[i,2], cell)           # T√™n NPP
            ws.write(r,3, d.iloc[i,3], cell)           # M√£ KH
            ws.write(r,4, d.iloc[i,4], cell)           # T√™n KH
            ws.write_number(r,5, int(d.iloc[i,5]), center)   # Giai ƒëo·∫°n m1
            ws.write_number(r,6, int(d.iloc[i,6]), center)   # Giai ƒëo·∫°n m2
            ws.write_number(r,7, int(d.iloc[i,7]), intfmt)   # Doanh s·ªë m1
            ws.write_number(r,8, int(d.iloc[i,8]), intfmt)   # Doanh s·ªë m2

            stt = str(d.iloc[i,9]).strip()
            fmt = okfmt if stt == "ƒê·∫°t" else badfmt if stt == "Kh√¥ng ƒê·∫°t" else neut if stt == "Kh√¥ng x√©t" else center
            ws.write(r,9, stt, fmt)

        # width & freeze panes
        widths = [12,12,22,16,28,14,14,16,16,14]
        for c, w in enumerate(widths):
            ws.set_column(c, c, w)
        ws.freeze_panes(start_row, 0)
        ws.set_footer('&R¬© Nguyen Anh Tai')

    return buf.getvalue()

# ================== UI / Main ==================
selected_programs = st.multiselect(
    "Ch·ªçn ch∆∞∆°ng tr√¨nh c·∫ßn x·ª≠ l√Ω:",
    options=list(PROGRAMS.keys()),
    format_func=lambda x: f"{x} - {PROGRAMS[x]}",
)
if not selected_programs:
    st.info("Ch·ªçn √≠t nh·∫•t 1 ch∆∞∆°ng tr√¨nh ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
    st.stop()
st.success(f"ƒê√£ ch·ªçn: {', '.join(selected_programs)}")

for prog in selected_programs:
    st.markdown("---")
    st.subheader(f"üìå X·ª≠ l√Ω CT: {prog} - {PROGRAMS[prog]}")

    # Upload
    st.markdown("**Upload 2 file TR∆ØNG B√ÄY (App t·ª± l·∫•y th√°ng t·ª´ c·ªôt H 'Giai ƒëo·∫°n')**")
    tb1 = st.file_uploader(f"[{prog}] File tr∆∞ng b√†y #1", type=["xlsx"], key=f"{prog}_tb1")
    tb2 = st.file_uploader(f"[{prog}] File tr∆∞ng b√†y #2", type=["xlsx"], key=f"{prog}_tb2")

    st.markdown("**Upload 2 file DOANH S·ªê (sheet ph·∫£i tr√πng t√™n CT, v√≠ d·ª• 'NMCD')**")
    ds1 = st.file_uploader(f"[{prog}] File doanh s·ªë #1", type=["xlsx"], key=f"{prog}_ds1")
    ds2 = st.file_uploader(f"[{prog}] File doanh s·ªë #2", type=["xlsx"], key=f"{prog}_ds2")

    data_key = f"__{prog}_data__"

    # N√∫t x·ª≠ l√Ω & l∆∞u session
    if tb1 and tb2 and st.button(f"X·ª≠ l√Ω CT {prog}", key=f"{prog}_process_btn"):
        try:
            df1 = read_display_excel(tb1)
            df2 = read_display_excel(tb2)
            result, m1, m2 = combine_two_months(df1, df2)

            if ds1:
                s1 = read_sales_excel(ds1, program_sheet_name=prog)
                result = result.merge(s1, on="M√£ kh√°ch h√†ng", how="left")
                result[f"Doanh s·ªë - {m1}"] = result.pop("T·ªïng Doanh s·ªë").fillna(0)
            if ds2:
                s2 = read_sales_excel(ds2, program_sheet_name=prog)
                result = result.merge(s2, on="M√£ kh√°ch h√†ng", how="left")
                if "T·ªïng Doanh s·ªë" in result.columns:
                    result[f"Doanh s·ªë - {m2}"] = result.pop("T·ªïng Doanh s·ªë").fillna(0)

            for c in [f"Doanh s·ªë - {m1}", f"Doanh s·ªë - {m2}"]:
                result[c] = pd.to_numeric(result[c], errors="coerce").fillna(0).astype(int)
                
            if prog == "KOS&XX":
                # Mi·ªÅn MB: 200k/slot, mi·ªÅn kh√°c: 300k/slot
                result = apply_status_kosxx(result, m1, m2, min_mb=200_000, min_other=300_000)
            else:
                per_min = PER_SLOT_MIN.get(prog, 0)
                result = apply_status_generic(result, m1, m2, per_slot_min=per_min)

            st.session_state[data_key] = {"df": result, "m1": m1, "m2": m2}
            st.success("‚úÖ Ho√†n t·∫•t: ƒë√£ gh√©p doanh s·ªë & t√≠nh tr·∫°ng th√°i.")
        except Exception as e:
            st.error(f"L·ªói khi x·ª≠ l√Ω: {e}")

    # Hi·ªÉn th·ªã/l·ªçc khi ƒë√£ c√≥ d·ªØ li·ªáu
    if data_key in st.session_state:
        result = st.session_state[data_key]["df"].copy()
        m1 = st.session_state[data_key]["m1"]
        m2 = st.session_state[data_key]["m2"]

        with st.expander(f"üîé B·ªô l·ªçc ‚Äî {prog}", expanded=False):
            c1, c2, c3, c4 = st.columns([1,1,1,1])
            with c1:
                npp_codes = st.multiselect(
                    "M√£ NPP",
                    options=sorted(result["M√£ NPP"].dropna().unique()),
                    key=f"{prog}_npp_codes"
                )
            with c2:
                npp_names = st.multiselect(
                    "T√™n NPP",
                    options=sorted(result["T√™n NPP"].dropna().unique()),
                    key=f"{prog}_npp_names"
                )
            with c3:
                statuses = st.multiselect(
                    "Tr·∫°ng th√°i",
                    options=["ƒê·∫°t","Kh√¥ng ƒê·∫°t","Kh√¥ng x√©t"],
                    key=f"{prog}_statuses"
                )
            with c4:
                kw = st.text_input("T√¨m (M√£ KH / T√™n KH)", key=f"{prog}_kw")
        
        c5, c6, c7, c8 = st.columns(4)
        with c5:
            min_sales_m1 = st.number_input(
                f"Doanh s·ªë t·ªëi thi·ªÉu ‚Äì {m1}",
                min_value=0, value=0, step=50_000, key=f"{prog}_min_sales_m1"
            )
        with c6:
            min_sales_m2 = st.number_input(
                f"Doanh s·ªë t·ªëi thi·ªÉu ‚Äì {m2}",
                min_value=0, value=0, step=50_000, key=f"{prog}_min_sales_m2"
            )
        with c7:
            min_slots_m1 = st.number_input(
                f"Giai ƒëo·∫°n (s·ªë su·∫•t) ‚Äì {m1}",
                min_value=0, value=0, step=1, key=f"{prog}_min_slots_m1"
            )
        with c8:
            min_slots_m2 = st.number_input(
                f"Giai ƒëo·∫°n (s·ªë su·∫•t) ‚Äì {m2}",
                min_value=0, value=0, step=1, key=f"{prog}_min_slots_m2"
            )

        # ================== √Åp d·ª•ng l·ªçc ==================
        filtered = result.copy()

        if npp_codes:
            filtered = filtered[filtered["M√£ NPP"].isin(npp_codes)]
        if npp_names:
            filtered = filtered[filtered["T√™n NPP"].isin(npp_names)]
        if statuses:
            filtered = filtered[filtered["TR·∫†NG TH√ÅI"].isin(statuses)]
        if kw:
            kw_l = kw.strip().lower()
            filtered = filtered[
                filtered["M√£ kh√°ch h√†ng"].astype(str).str.lower().str.contains(kw_l)
                | filtered["T√™n kh√°ch h√†ng"].astype(str).str.lower().str.contains(kw_l)
            ]

        # Doanh s·ªë t·ªëi thi·ªÉu theo t·ª´ng th√°ng
        filtered = filtered[
            (filtered[f"Doanh s·ªë - {m1}"].astype(int) >= int(min_sales_m1))
            & (filtered[f"Doanh s·ªë - {m2}"].astype(int) >= int(min_sales_m2))
        ]

        # Giai ƒëo·∫°n (s·ªë su·∫•t) t·ªëi thi·ªÉu theo t·ª´ng th√°ng
        if int(min_slots_m1) > 0:
            filtered = filtered[filtered[f"Giai ƒëo·∫°n - {m1}"].astype(int) >= int(min_slots_m1)]
        if int(min_slots_m2) > 0:
            filtered = filtered[filtered[f"Giai ƒëo·∫°n - {m2}"].astype(int) >= int(min_slots_m2)]

        # ================== Hi·ªÉn th·ªã & T·∫£i xu·ªëng ==================
        st.dataframe(filtered, use_container_width=True)

        # Excel sau khi l·ªçc
        excel_filtered = export_excel_layout(filtered, m1, m2, prog)
        st.download_button(
            "‚¨áÔ∏è T·∫£i EXCEL ‚Äì K·∫øt qu·∫£ (Sau khi l·ªçc)",
            data=excel_filtered,
            file_name=f"{prog}_ketqua_loc_{m1}_{m2}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            key=f"{prog}_dl_filtered",
        )

        # Excel b·∫£n chu·∫©n (kh√¥ng l·ªçc)
        excel_raw = export_excel_layout(result, m1, m2, prog)
        st.download_button(
            "‚¨áÔ∏è T·∫£i EXCEL ‚Äì K·∫øt qu·∫£ (B·∫£n chu·∫©n)",
            data=excel_raw,
            file_name=f"{prog}_ketqua_chuan_{m1}_{m2}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            key=f"{prog}_dl_raw",
        )
    else:
        st.info("üëâ Upload file v√† b·∫•m **X·ª≠ l√Ω** ƒë·ªÉ t·∫°o d·ªØ li·ªáu tr∆∞·ªõc khi l·ªçc/t·∫£i.")

