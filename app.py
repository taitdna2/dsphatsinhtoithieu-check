import pandas as pd
import streamlit as st

PROGRAMS = {
    "NMCD": "N∆∞·ªõc m·∫Øm cao ƒë·∫°m",
    "DHLM": "D·∫ßu h√†o, N∆∞·ªõc t∆∞∆°ng",
    "KOS&XX": "C√° KOS & X√∫c x√≠ch",
    "GVIG": "Gia v·ªã g√≥i",
    "LTLKC": "L·∫©u Th√°i & L·∫©u Kim chi",
}

st.set_page_config(page_title="X·ª≠ l√Ω d·ªØ li·ªáu tr∆∞ng b√†y", layout="wide")
st.title("üìä X·ª≠ l√Ω d·ªØ li·ªáu Tr∆∞ng b√†y & Doanh s·ªë")
st.caption("v0.2 ‚Äî TR∆ØNG B√ÄY + DOANH S·ªê + TR·∫†NG TH√ÅI cho CT NMCD.")

# ===== Helpers =====
BASE_COLS = ["M√£ CTTB","M√£ NPP","T√™n NPP","M√£ kh√°ch h√†ng","T√™n kh√°ch h√†ng"]

def read_display_excel(file) -> pd.DataFrame:
    """ƒê·ªçc file tr∆∞ng b√†y t·ª´ h√†ng 3 (skiprows=2), gi·ªØ c·ªôt H=Giai ƒëo·∫°n, l·∫•y B,F,G,H,K,L,T."""
    df = pd.read_excel(file, usecols="B,F,G,H,K,L,T", skiprows=2, engine="openpyxl")
    df.columns = [
        "M√£ CTTB","M√£ NPP","T√™n NPP","Giai ƒëo·∫°n",
        "M√£ kh√°ch h√†ng","T√™n kh√°ch h√†ng","S·ªë su·∫•t ƒëƒÉng k√Ω"
    ]
    for c in ["M√£ CTTB","M√£ NPP","T√™n NPP","M√£ kh√°ch h√†ng","T√™n kh√°ch h√†ng","Giai ƒëo·∫°n"]:
        df[c] = df[c].astype(str).str.strip()
    df = df[(df["M√£ CTTB"]!="") & (df["M√£ kh√°ch h√†ng"]!="") & (df["Giai ƒëo·∫°n"]!="")].copy()
    df["S·ªë su·∫•t ƒëƒÉng k√Ω"] = pd.to_numeric(df["S·ªë su·∫•t ƒëƒÉng k√Ω"], errors="coerce").fillna(0).astype(int)
    return df[["Giai ƒëo·∫°n"] + BASE_COLS + ["S·ªë su·∫•t ƒëƒÉng k√Ω"]]

def extract_month_label(df: pd.DataFrame) -> str:
    """L·∫•y nh√£n th√°ng t·ª´ c·ªôt 'Giai ƒëo·∫°n' (d√πng gi√° tr·ªã ph·ªï bi·∫øn nh·∫•t)."""
    vals = df["Giai ƒëo·∫°n"].dropna().astype(str).str.strip()
    if vals.empty: return "Th√°ng ?"
    try:
        return vals.mode().iloc[0]
    except Exception:
        return vals.iloc[0]

def combine_two_months(d1: pd.DataFrame, d2: pd.DataFrame):
    """Tr·∫£ v·ªÅ (out, m1, m2) ‚Äì out l√† b·∫£ng g·ªôp 2 th√°ng, m1/m2 l√† nh√£n th√°ng."""
    m1 = extract_month_label(d1)
    m2 = extract_month_label(d2)

    d1_slots = (d1.groupby(BASE_COLS, as_index=False)["S·ªë su·∫•t ƒëƒÉng k√Ω"]
                  .sum().rename(columns={"S·ªë su·∫•t ƒëƒÉng k√Ω": f"Giai ƒëo·∫°n - {m1}"}))
    d2_slots = (d2.groupby(BASE_COLS, as_index=False)["S·ªë su·∫•t ƒëƒÉng k√Ω"]
                  .sum().rename(columns={"S·ªë su·∫•t ƒëƒÉng k√Ω": f"Giai ƒëo·∫°n - {m2}"}))

    out = d1_slots.merge(d2_slots, on=BASE_COLS, how="outer").fillna(0)
    out[f"Giai ƒëo·∫°n - {m1}"] = out[f"Giai ƒëo·∫°n - {m1}"].astype(int)
    out[f"Giai ƒëo·∫°n - {m2}"] = out[f"Giai ƒëo·∫°n - {m2}"].astype(int)

    out[f"Doanh s·ªë - {m1}"] = 0
    out[f"Doanh s·ªë - {m2}"] = 0
    out["TR·∫†NG TH√ÅI"] = ""

    cols = BASE_COLS + [f"Giai ƒëo·∫°n - {m1}", f"Giai ƒëo·∫°n - {m2}",
                        f"Doanh s·ªë - {m1}", f"Doanh s·ªë - {m2}", "TR·∫†NG TH√ÅI"]
    out = out[cols].sort_values(["M√£ NPP","T√™n NPP","T√™n kh√°ch h√†ng"]).reset_index(drop=True)
    return out, m1, m2

def read_sales_excel(file, program_sheet_name: str) -> pd.DataFrame:
    """ƒê·ªçc file doanh s·ªë: ch·ªâ sheet tr√πng t√™n ch∆∞∆°ng tr√¨nh (v√≠ d·ª• 'NMCD').
       Tr·∫£ v·ªÅ c·ªôt: 'M√£ kh√°ch h√†ng', 'T·ªïng Doanh s·ªë' (ƒë√£ c·ªông g·ªôp theo KH)."""
    xls = pd.ExcelFile(file, engine="openpyxl")
    sheets_lower = {s.lower(): s for s in xls.sheet_names}
    if program_sheet_name.lower() not in sheets_lower:
        raise ValueError(f"Kh√¥ng th·∫•y sheet '{program_sheet_name}' trong file doanh s·ªë. Sheets: {', '.join(xls.sheet_names)}")
    sheet = sheets_lower[program_sheet_name.lower()]
    df = pd.read_excel(xls, sheet_name=sheet)

    # ƒëo√°n c·ªôt m√£ KH
    id_candidates = [c for c in df.columns if str(c).strip().lower() in
        ["m√£ kh√°ch h√†ng","ma khach hang","m√£ kh","ma kh","customerid","customer id","makh","ma_kh","m√£_kh"]]
    if not id_candidates:
        raise ValueError("Kh√¥ng t√¨m th·∫•y c·ªôt M√£ kh√°ch h√†ng trong file doanh s·ªë")
    col_id = id_candidates[0]

    # ƒëo√°n c·ªôt t·ªïng doanh s·ªë
    sales_candidates = [c for c in df.columns if str(c).strip().lower() in
        ["t·ªïng doanh s·ªë","tong doanh so","tongdoanhso","doanh so","doanh_s·ªë","sum sales","sales"]]
    if not sales_candidates:
        raise ValueError("Kh√¥ng t√¨m th·∫•y c·ªôt 'T·ªïng Doanh s·ªë' trong file doanh s·ªë")
    col_sales = sales_candidates[0]

    out = df[[col_id, col_sales]].copy()
    out.columns = ["M√£ kh√°ch h√†ng","T·ªïng Doanh s·ªë"]
    out["M√£ kh√°ch h√†ng"] = out["M√£ kh√°ch h√†ng"].astype(str).str.strip()
    out["T·ªïng Doanh s·ªë"] = pd.to_numeric(out["T·ªïng Doanh s·ªë"], errors="coerce").fillna(0)
    out = out.groupby("M√£ kh√°ch h√†ng", as_index=False)["T·ªïng Doanh s·ªë"].sum()
    return out

# ---- T√çNH TR·∫†NG TH√ÅI CHO CT NMCD ----
def apply_status_nmcd(df: pd.DataFrame, m1: str, m2: str, per_slot_min: int = 150_000) -> pd.DataFrame:
    s1_col = f"Giai ƒëo·∫°n - {m1}"
    s2_col = f"Giai ƒëo·∫°n - {m2}"
    d1_col = f"Doanh s·ªë - {m1}"
    d2_col = f"Doanh s·ªë - {m2}"

    # m·ª©c t·ªëi thi·ªÉu theo s·ªë su·∫•t (1 su·∫•t=150k, 2 su·∫•t=300k)
    min1 = df[s1_col].astype(int) * per_slot_min
    min2 = df[s2_col].astype(int) * per_slot_min

    # tham gia?
    join1 = df[s1_col].astype(int) > 0
    join2 = df[s2_col].astype(int) > 0

    meet1 = (df[d1_col].astype(int) >= min1) & join1
    meet2 = (df[d2_col].astype(int) >= min2) & join2

    # rule:
    # - n·∫øu kh√¥ng tham gia ƒë·ªß 2 th√°ng -> Kh√¥ng x√©t
    # - n·∫øu c·∫£ 2 th√°ng ƒë·ªÅu kh√¥ng ƒë·∫°t -> Kh√¥ng ƒê·∫°t
    # - ng∆∞·ª£c l·∫°i -> ƒê·∫°t
    status = []
    for j1, j2, ok1, ok2 in zip(join1, join2, meet1, meet2):
        if not (j1 and j2):
            status.append("Kh√¥ng x√©t")
        elif (not ok1) and (not ok2):
            status.append("Kh√¥ng ƒê·∫°t")
        else:
            status.append("ƒê·∫°t")

    df_out = df.copy()
    df_out["TR·∫†NG TH√ÅI"] = status

    # (tu·ª≥ ch·ªçn) th√™m 2 c·ªôt m·ª©c t·ªëi thi·ªÉu ƒë·ªÉ b·∫°n nh√¨n r√µ
    df_out[f"T·ªëi thi·ªÉu - {m1}"] = min1
    df_out[f"T·ªëi thi·ªÉu - {m2}"] = min2
    return df_out

# ===== UI =====
selected_programs = st.multiselect(
    "Ch·ªçn ch∆∞∆°ng tr√¨nh c·∫ßn x·ª≠ l√Ω:",
    options=list(PROGRAMS.keys()),
    format_func=lambda x: f"{x} - {PROGRAMS[x]}",
)
if not selected_programs:
    st.info("Ch·ªçn √≠t nh·∫•t 1 ch∆∞∆°ng tr√¨nh ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
    st.stop()
st.success(f"ƒê√£ ch·ªçn: {', '.join(selected_programs)}")

for prog in selected_programs:
    st.markdown("---")
    st.subheader(f"üìå X·ª≠ l√Ω CT: {prog} - {PROGRAMS[prog]}")

    st.markdown("**Upload 2 file TR∆ØNG B√ÄY (2 th√°ng b·∫•t k·ª≥ ‚Äì app l·∫•y th√°ng t·ª´ c·ªôt H 'Giai ƒëo·∫°n')**")
    tb1 = st.file_uploader(f"[{prog}] File tr∆∞ng b√†y #1", type=["xlsx"], key=f"{prog}_tb1")
    tb2 = st.file_uploader(f"[{prog}] File tr∆∞ng b√†y #2", type=["xlsx"], key=f"{prog}_tb2")

    st.markdown("**Upload 2 file DOANH S·ªê (sheet ph·∫£i tr√πng t√™n CT, v√≠ d·ª• 'NMCD')**")
    ds1 = st.file_uploader(f"[{prog}] File doanh s·ªë #1", type=["xlsx"], key=f"{prog}_ds1")
    ds2 = st.file_uploader(f"[{prog}] File doanh s·ªë #2", type=["xlsx"], key=f"{prog}_ds2")

    if tb1 and tb2 and st.button(f"X·ª≠ l√Ω CT {prog}", key=f"{prog}_process"):
        try:
            # Tr∆∞ng b√†y
            df1 = read_display_excel(tb1)
            df2 = read_display_excel(tb2)
            st.write(f"üìÑ {prog} ‚Äì Tr∆∞ng b√†y: file #1 = {len(df1)} d√≤ng, file #2 = {len(df2)} d√≤ng")
            result, m1, m2 = combine_two_months(df1, df2)

            # Doanh s·ªë (n·∫øu c√≥)
            if ds1:
                s1 = read_sales_excel(ds1, program_sheet_name=prog)
                result = result.merge(s1, on="M√£ kh√°ch h√†ng", how="left")
                result[f"Doanh s·ªë - {m1}"] = result["T·ªïng Doanh s·ªë"].fillna(0)
                result.drop(columns=["T·ªïng Doanh s·ªë"], inplace=True, errors="ignore")
            if ds2:
                s2 = read_sales_excel(ds2, program_sheet_name=prog)
                result = result.merge(s2, on="M√£ kh√°ch h√†ng", how="left")
                if "T·ªïng Doanh s·ªë" in result.columns:
                    result.rename(columns={"T·ªïng Doanh s·ªë": "_T·ªïng Doanh s·ªë 2"}, inplace=True)
                    result[f"Doanh s·ªë - {m2}"] = result["_T·ªïng Doanh s·ªë 2"].fillna(0)
                    result.drop(columns=["_T·ªïng Doanh s·ªë 2"], inplace=True, errors="ignore")

            # √âp s·ªë int cho ƒë·∫πp
            for c in [f"Doanh s·ªë - {m1}", f"Doanh s·ªë - {m2}"]:
                result[c] = pd.to_numeric(result[c], errors="coerce").fillna(0).astype(int)

            # Tr·∫°ng th√°i theo t·ª´ng CT
            if prog == "NMCD":
                result = apply_status_nmcd(result, m1, m2, per_slot_min=150_000)
            else:
                # t·∫°m ƒë·ªÉ tr·ªëng cho CT kh√°c
                result["TR·∫†NG TH√ÅI"] = result.get("TR·∫†NG TH√ÅI", "")

            st.success("‚úÖ Ho√†n t·∫•t (NMCD): ƒë√£ gh√©p doanh s·ªë & t√≠nh tr·∫°ng th√°i.")
            st.dataframe(result, use_container_width=True)

            # T·∫£i xu·ªëng CSV
            csv = result.to_csv(index=False).encode("utf-8-sig")
            st.download_button(
                "‚¨áÔ∏è T·∫£i CSV ‚Äì K·∫øt qu·∫£",
                data=csv,
                file_name=f"{prog}_ketqua_{m1}_{m2}.csv",
                mime="text/csv",
            )

        except Exception as e:
            st.error(f"L·ªói khi x·ª≠ l√Ω: {e}")
    else:
        st.info("Upload ƒë·ªß 2 file tr∆∞ng b√†y (v√† doanh s·ªë n·∫øu c√≥), r·ªìi b·∫•m n√∫t ƒë·ªÉ x·ª≠ l√Ω.")
